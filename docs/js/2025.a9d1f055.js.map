{"version":3,"file":"js/2025.a9d1f055.js","mappings":"MAGA,SAASA,EAAmBC,EAAQC,GAChC,OAAO,IAAIC,SAASC,IAChB,SAASC,EAAeC,GACpBL,EAAOM,oBAAoB,UAAWF,GACtCD,EAAQE,EAAME,KAClB,CACAP,EAAOQ,iBAAiB,UAAWJ,GACnCK,QAAQC,IAAIT,GAEZD,EAAOW,YAAYV,EAAQ,GAEnC,CAbAW,KAAKC,cAAc,4DAenB,IAAIC,EAAsB,WAEtBF,KAAKG,cAAgBC,cAErBJ,KAAKK,UAAY,GACjBL,KAAKM,SAAW,GAEhBN,KAAKO,WAAY,EAEjBP,KAAKG,QAAQK,UAAU,CACnBC,SAAS,EACTC,MAAQf,IACJ,MAAMgB,EAAU,IAAIC,YAAY,SAC1BC,EAASF,EAAQG,OAAOnB,GAG9B,OAFAK,KAAKK,WAAaQ,EAClBb,KAAKD,YAAY,CAAEgB,KAAM,SAAUF,OAAQb,KAAKK,YACzCQ,EAAOG,MAAM,IAG5BhB,KAAKG,QAAQc,UAAU,CACnBR,SAAS,EACTC,MAAQf,IACJ,MAAMgB,EAAU,IAAIC,YAAY,SAC1BM,EAAQP,EAAQG,OAAOnB,GAG7B,OAFAK,KAAKM,UAAYY,EACjBlB,KAAKD,YAAY,CAAEgB,KAAM,SAAUG,MAAOlB,KAAKM,WACxCY,EAAMF,MAAM,IAI3BhB,KAAKG,QAAQgB,SAAS,CAClBC,MAAOC,UACH,MAAM1B,QAAaR,EAAmBa,KAAM,CAACe,KAAM,UACnD,OAAOpB,EAAKkB,MAAM,GAG7B,EApCyB,GAsC1Bb,KAAKsB,UAAYD,MAAO5B,UACdS,EAEN,IACI,MAAMW,QAAeb,KAAKG,QAAQoB,eAAe9B,EAAME,MACvDK,KAAKD,YAAY,CAAEgB,KAAM,SAAUF,UACvC,CAAE,MAAOK,GACLlB,KAAKD,YAAY,CAAEgB,KAAM,QAASG,MAAOA,EAAM7B,SACnD,CACAW,KAAKK,UAAY,GACjBL,KAAKM,SAAW,EAAE,C","sources":["webpack://wasm-pm/./src/modules/python/PythonWorker.js"],"sourcesContent":["// pyodideWorker.js\nself.importScripts('https://cdn.jsdelivr.net/pyodide/v0.26.4/full/pyodide.js');\n\nfunction postMessageAndWait(worker, message) {\n    return new Promise((resolve) => {\n        function handleResponse(event) {\n            worker.removeEventListener(\"message\", handleResponse);\n            resolve(event.data);\n        }\n        worker.addEventListener(\"message\", handleResponse);\n        console.log(message)\n        // debugger\n        worker.postMessage(message);\n    });\n}\n\nlet pyodideReadyPromise = (async () => {\n    /* global loadPyodide */\n    self.pyodide = await loadPyodide();\n\n    self.outputBuf = '';\n    self.errorBuf = '';\n\n    self.waitWrite = false;\n\n    self.pyodide.setStdout({\n        batched: false,\n        write: (data) => {\n            const decoder = new TextDecoder('utf-8');\n            const result = decoder.decode(data);\n            self.outputBuf += result;\n            self.postMessage({ type: 'stdout', result: self.outputBuf });\n            return result.length;\n        }\n    });\n    self.pyodide.setStderr({\n        batched: false,\n        write: (data) => {\n            const decoder = new TextDecoder('utf-8');\n            const error = decoder.decode(data);\n            self.errorBuf += error;\n            self.postMessage({ type: 'stderr', error: self.errorBuf });\n            return error.length;\n        }\n    });\n\n    self.pyodide.setStdin({\n        stdin: async () => {\n            const data = await postMessageAndWait(self, {type: 'stdin'});\n            return data.result;\n        }\n    });\n})();\n\nself.onmessage = async (event) => {\n    await pyodideReadyPromise;\n\n    try {\n        const result = await self.pyodide.runPythonAsync(event.data);\n        self.postMessage({ type: 'result', result });\n    } catch (error) {\n        self.postMessage({ type: 'error', error: error.message });\n    }\n    self.outputBuf = '';\n    self.errorBuf = '';\n};\n"],"names":["postMessageAndWait","worker","message","Promise","resolve","handleResponse","event","removeEventListener","data","addEventListener","console","log","postMessage","self","importScripts","pyodideReadyPromise","pyodide","loadPyodide","outputBuf","errorBuf","waitWrite","setStdout","batched","write","decoder","TextDecoder","result","decode","type","length","setStderr","error","setStdin","stdin","async","onmessage","runPythonAsync"],"sourceRoot":""}
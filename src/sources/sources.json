{
    "go": {
        "calculator": "package main\n\nimport (\n\t\"fmt\"\n)\n\nfunc calculator(a float64, b float64, operation string) string {\n\tswitch operation {\n\tcase \"+\":\n\t\treturn fmt.Sprintf(\"%.2f\", a+b)\n\tcase \"-\":\n\t\treturn fmt.Sprintf(\"%.2f\", a-b)\n\tcase \"*\":\n\t\treturn fmt.Sprintf(\"%.2f\", a*b)\n\tcase \"\/\":\n\t\tif b != 0 {\n\t\t\treturn fmt.Sprintf(\"%.2f\", a\/b)\n\t\t}\n\t\treturn \"Деление на ноль\"\n\tdefault:\n\t\treturn \"Неизвестная операция\"\n\t}\n}\n\nfunc main() {\n\tfmt.Println(calculator(10, 5, \"+\")) \/\/ Пример: 10 + 5 = 15\n}",
        "check_io": "package main\n\nimport (\n\t\"os\"\n)\n\nfunc main() {\n\tfor _, arg := range os.Args {\n\t\tos.Stdout.WriteString(\"arg: \" + arg + \"\\n\")\n\t}\n\n\tfor _, env := range os.Environ() {\n\t\tos.Stdout.WriteString(\"env: \" + env + \"\\n\")\n\t}\n\n\tbuf := make([]byte, 1024)\n    n, _ := os.Stdin.Read(buf)\n    if n > 0 {\n        os.Stdout.WriteString(\"from stdin: \")\n        os.Stdout.Write(buf[:n])\n        os.Stdout.WriteString(\"\\n\")\n    }\n\n    os.Stdout.WriteString(\"stdout message!\\n\")\n    os.Stderr.WriteString(\"stderr message!\\n\")\n\n\tcode := 0\n\tif len(os.Args) > 1 {\n\t\tcode = 42\n\t}\n\tos.Exit(code)\n}\n",
        "countdown": "package main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc daysUntil(targetDate string) int {\n\ttarget, _ := time.Parse(\"2006-01-02\", targetDate)\n\ttoday := time.Now()\n\treturn int(target.Sub(today).Hours() \/ 24)\n}\n\nfunc main() {\n\tfmt.Println(daysUntil(\"2024-12-31\")) \/\/ Пример: количество дней до 31 декабря 2024\n}",
        "hello_world": "package main\n\nimport \"fmt\"\n\nfunc main() {\n\tfmt.Println(\"hello world\")\n}\n",
        "is_even": "package main\n\nimport (\n\t\"fmt\"\n)\n\nfunc isEven(number int) string {\n\tif number%2 == 0 {\n\t\treturn \"Чётное\"\n\t}\n\treturn \"Нечётное\"\n}\n\nfunc main() {\n\tfmt.Println(isEven(7)) \/\/ Пример: \"Нечётное\"\n}",
        "parallel": "package main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc worker(id int, jobs <-chan int, results chan<- int) {\n\tfor job := range jobs {\n\t\tfmt.Printf(\"Worker %d started job %d\\n\", id, job)\n\t\ttime.Sleep(time.Second)\n\t\tfmt.Printf(\"Worker %d finished job %d\\n\", id, job)\n\t\tresults <- job * 2\n\t}\n}\n\nfunc main() {\n\tjobs := make(chan int, 5)\n\tresults := make(chan int, 5)\n\n\tfor w := 1; w <= 3; w++ {\n\t\tgo worker(w, jobs, results)\n\t}\n\n\tfor j := 1; j <= 5; j++ {\n\t\tjobs <- j\n\t}\n\tclose(jobs)\n\n\tfor a := 1; a <= 5; a++ {\n\t\tfmt.Println(<-results)\n\t}\n}",
        "password": "package main\n\nimport (\n\t\"crypto\/rand\"\n\t\"fmt\"\n\t\"math\/big\"\n)\n\nfunc generatePassword(length int) string {\n\tconst chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%\"\n\tpassword := make([]byte, length)\n\tfor i := range password {\n\t\tnum, _ := rand.Int(rand.Reader, big.NewInt(int64(len(chars))))\n\t\tpassword[i] = chars[num.Int64()]\n\t}\n\treturn string(password)\n}\n\nfunc main() {\n\tfmt.Println(generatePassword(12)) \/\/ Пример: случайный пароль длиной 12 символов\n}"
    },
    "php": {
        "calculator": "<?php\n\nfunction calculator(float $a, float $b, string $operation): ?float\n{\n    return match ($operation) {\n        '+' => $a + $b,\n        '-' => $a - $b,\n        '*' => $a * $b,\n        '\/' => $a \/ $b,\n        default => null,\n    };\n}\n\necho calculator(10, 5, '+');",
        "check_io": "<?php\n\n$stdOut = fopen('php:\/\/stdout', 'w');\n$stdErr = fopen('php:\/\/stderr', 'w');\n$stdIn = fopen('php:\/\/stdin', 'r');\n\n$argv = get_defined_vars();\n\/*\nforeach ($argv as $arg) {\n    fwrite($stdOut, \"arg: \" . $arg . PHP_EOL);\n}\n*\/\n\nvar_dump(glob('\/persist\/*'));\n\nforeach ($_ENV as $key => $value) {\n    fwrite($stdOut, \"env: \" . $key . \"=\" . $value . PHP_EOL);\n}\n\n$stdinContent = fread($stdIn, 1024);\nif ($stdinContent !== false && $stdinContent !== '') {\n    fwrite($stdOut, \"from stdin: \" . $stdinContent . PHP_EOL);\n}\n\nfwrite($stdOut, \"stdout message!\" . PHP_EOL);\nfwrite($stdErr, \"stderr message!\" . PHP_EOL);\n\n$exitCode = (count($argv) > 1) ? 42 : 0;\nexit($exitCode);",
        "countdown": "<?php\n\nfunction daysUntil(string $date): float\n{\n    $target = strtotime($date);\n    $today = strtotime(date('Y-m-d'));\n    return ceil(($target - $today) \/ 86400);\n}\n\necho daysUntil('2024-12-31');",
        "hello_world": "<?php\n\necho \"hello world!\";",
        "is_even": "<?php\n\nfunction isEven(int $number): string\n{\n    return $number % 2 == 0 ? \"Чётное\" : \"Нечётное\";\n}\n\necho isEven(7);",
        "parallel": "<?php\n\nfunction worker(int $id, array $jobs, array &$results): void\n{\n    foreach ($jobs as $job) {\n        echo \"Worker $id started job $job\\n\";\n        Fiber::suspend();\n        echo \"Worker $id finished job $job\\n\";\n        $results[] = $job * 2;\n    }\n}\n\n$jobs = [1, 2, 3, 4, 5];\n$results = [];\n\n$fibers = [];\nforeach (range(1, 3) as $id) {\n    $fibers[] = new Fiber(fn () => worker($id, $jobs, $results));\n}\n\nforeach ($fibers as $fiber) {\n    $fiber->start();\n}\n\nwhile (count($results) < count($jobs)) {\n    foreach ($fibers as $fiber) {\n        if ($fiber->isSuspended()) {\n            $fiber->resume();\n        }\n    }\n}\n\nprint_r($results);",
        "password": "<?php\n\nfunction generatePassword(int $length = 8): string\n{\n    $chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%';\n    $password = '';\n    for ($i = 0; $i < $length; $i++) {\n        $password .= $chars[rand(0, strlen($chars) - 1)];\n    }\n    return $password;\n}\n\necho generatePassword(12);"
    },
    "python": {
        "calculator": "def calculator(a, b, operation):\n    if operation == '+':\n        return a + b\n    elif operation == '-':\n        return a - b\n    elif operation == '*':\n        return a * b\n    elif operation == '\/':\n        return a \/ b if b != 0 else 'Деление на ноль'\n    else:\n        return 'Неизвестная операция'\n\nprint(calculator(10, 5, '+'))",
        "check_io": "import os\nimport sys\n\ndef main():\n    for arg in sys.argv:\n        sys.stdout.write(f\"arg: {arg}\\n\")\n\n    for key, value in os.environ.items():\n        sys.stdout.write(f\"env: {key}={value}\\n\")\n\n    try:\n        buf = sys.stdin.read(1024)\n        if buf:\n            sys.stdout.write(\"from stdin: \" + buf + \"\\n\")\n    except Exception as e:\n        sys.stderr.write(f\"Error reading stdin: {e}\\n\")\n\n    sys.stdout.write(\"stdout message!\\n\")\n    sys.stderr.write(\"stderr message!\\n\")\n\n    #code = 42 if len(sys.argv) > 1 else 0\n    #sys.exit(code)\n\nif __name__ == \"__main__\":\n    main()\n",
        "countdown": "from datetime import datetime\n\ndef days_until(target_date):\n    target = datetime.strptime(target_date, '%Y-%m-%d')\n    today = datetime.today()\n    return (target - today).days\n\nprint(days_until('2024-12-31'))",
        "hello_world": "print(\"Hello, World!\")",
        "is_even": "def is_even(number):\n    return \"Чётное\" if number % 2 == 0 else \"Нечётное\"\n\nprint(is_even(7))",
        "parallel": "import asyncio\n\nasync def worker(id, jobs, results):\n    while not jobs.empty():\n        job = await jobs.get()\n        print(f\"Worker {id} started job {job}\")\n        await asyncio.sleep(1)\n        print(f\"Worker {id} finished job {job}\")\n        results.append(job * 2)\n\nasync def main():\n    jobs = asyncio.Queue()\n    results = []\n\n    for job in range(1, 6):\n        await jobs.put(job)\n\n    workers = [asyncio.create_task(worker(i, jobs, results)) for i in range(1, 4)]\n\n    await asyncio.gather(*workers)\n\n    print(results)\n\nasyncio.run(main())",
        "password": "import random\nimport string\n\ndef generate_password(length=8):\n    chars = string.ascii_letters + string.digits + \"!@#$%\"\n    return ''.join(random.choice(chars) for _ in range(length))\n\nprint(generate_password(12))"
    }
}